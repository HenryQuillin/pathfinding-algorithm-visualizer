PSEUDOCODE FOR FLOW CHART _______________

// Q stores the all nodes to be searched and their corresponding F Score 
// START is the starting node 

Q = new PriorityQueue() // Q stores all nodes that havens been searched and their corresponding F Score 

// G_SCORE =  new Array () // distance from the start node 
// H_SCORE =  new Array () // distance from current node to the target node
// F_SCORE =  new Array () // Sum of G and H score (F(n)=H(n)+G(n))


// Set the F and G Score of all nodes to 99999 except for the start node 
G_SCORE[START] = 0 
for each NODE in Q
	if NOT Q[NODE] = START then 
		G_SCORE[NODE]  =  99999 
        F_SCORE[NODE] = 99999
        Q.append(NODE, F_SCORE)
	end if  
end loop

loop while Q.hasNext() // Main loop 
	MIN_NODE = Q.getMinimumDist() // This method finds the node in Q with the smallest distance. 
	NODE = MIN_NODE // set the current node to MIN_NODE
	Q.remove(NODE) // remove the current node from the queue 
	NEIGHBORS = nodes connected to NODE
	for NEIGHBOR in NEIGHBORS  
        G_SCORE[NEIGHBOR] = NEIGHBOR.GetG_Score() // update the G Score of the neighbor node 
        H_SCORE[NEIGHBOR] = NEIGHBOR.GetH_Score() // update the H Score of the neighbor node 
		F_SCORE = G_SCORE[NEIGHBOR] + H_SCORE[NEIGHBOR] // calculate the f score of each neighbor node 
		if F_SCORE < F_SCORE[NEIGHBOR] // if the new F Score is less than the current F score 
			F_SCORE[NEIGHBOR] = F_SCORE // update distance of neighbor node
            Q.append(NEIGHBOR, F_SCORE)
		end if 
	end loop 
end loop 
return DIST  




















PSEUDOCODE _______________


// neighbors = empty nodes that are to the left, right, top, or bottom of current node 
// Inside the GetNeighbors() method: 
//  Need to check that the adjacent node is not past the end of grid
//  Need to check that the adjacent node is not a wall




// Initialize  open and closed list
COUNTER = 0
OPEN_LIST = []
CLOSED_LIST = []


// Add the start node
OPEN_LIST.append(START_NODE)

// Loop until you find the end
loop while OPEN_LIST.hasNext()
    // Get the current node
    CURRENT_NODE = OPEN_LIST[COUNTER].Sort.By(NODE.F)[0]// let the currentNode equal the node with the least f value
    OPEN_LIST.remove(CURRENT_NODE) // remove the currentNode from the openList
    CLOSED_LIST.add(CURRENT_NODE) // add the currentNode to the closedList

    // If found the target node
    if CURRENT_NODE == TARGET_NODE  
        end if 
        end loop 
        // Found the end!
    end if 
    
    // Generate children
    CHILDREN = NODE.GetNeighbors() // let the children of the currentNode equal the adjacent nodes
    COUNTER2 = 0
    while CHILDREN.hasNext()
        CHILD = CHILDREN[COUNTER2]

        // Check if child is on the closedList
        if CLOSED_LIST.IndexOf[CHILD].TypeOf == int 
            continue // restart and look at next child 
        end if
        // Create the f, g, and h values
        CHILD.G = CURRENT_NODE.G + CURRENT_NODE.GetDistanceBetweenChildAndCurrent()
        CHILD.H = CURRENT_NODE.GetDistanceFromChildToEnd()
        CHILD.F = CHILD.H + CHILD.G

        // Check if child is already in openList
        if CHILD.POSITION.IsInOpenList() 
            if CHILD.G > OPEN_LIST.GetNodeWithHighestGScore.G // if the child.g is higher than the openList node's g
                continue // continue to beginning of for loop
                end if 
        end if 

        // Add the child to the openList
        OPEN_LIST.Append(CHILD) 
        COUNTER2 = COUNTER2 + 1

    COUNTER = COUNTER + 1
    end loop
end loop    


SCRATCH PAD
-----------
def update_neighbors(self): # method of Node class 
    if SELF.ROW.is_barrier():
        SELF.NEIGHBORS.append()

if STARTED == false: # Check if the algorithm is running
    neighbors = NODE.UPDATE_NEIGHBORS()
    count = 0 
    open_set = 

    if ROW < TOTAL_